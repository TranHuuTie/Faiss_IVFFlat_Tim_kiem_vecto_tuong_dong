import numpy as np 
import faiss
import time

# --- Chuy·ªÉn FAISS sang ch·∫ø ƒë·ªô GPU ---
print("ƒêang kh·ªüi t·∫°o GPU resources v√† gi·ªõi h·∫°n b·ªô nh·ªõ...")
res = faiss.StandardGpuResources()
res.setTempMemory(512 * 1024 * 1024)  # Gi·ªõi h·∫°n t·∫°m th·ªùi b·ªô nh·ªõ GPU c√≤n 512MB
res.setPinnedMemory(512 * 1024 * 1024)  # D√πng pinned memory ƒë·ªÉ t·ªëi ∆∞u chuy·ªÉn d·ªØ li·ªáu GPU

# --- Load index v√† chuy·ªÉn sang GPU ---
print("ƒêang load index v√† chuy·ªÉn sang GPU...")
index = faiss.read_index('ivfflat_index_cosine_similarity.index')
index = faiss.index_cpu_to_gpu(res, 0, index)

# --- Load vectors ---
print("ƒêang load vectors...")
vectors = np.load('../random_vectors_1M.npy')

# --- Chu·∫©n h√≥a vectors ---
def normalize(vectors):
    norms = np.linalg.norm(vectors, axis=1, keepdims=True)
    np.clip(norms, 1e-10, None, out=norms)
    return vectors / norms

normalized_vectors = normalize(vectors)

# --- C·∫•u h√¨nh t√¨m ki·∫øm ---
total_queries = 10000
k = 200
lookalike_threshold = 0.836
query_vectors = normalized_vectors[:total_queries]

# qu√©t to√†n b·ªô 1000 c·ª•m
nprobe = 1000
index.nprobe = nprobe

# --- T·ªëi ∆∞u batch size ---
print("Chia nh·ªè batch size ƒë·ªÉ gi·∫£m t·∫£i b·ªô nh·ªõ...")
batch_size = 2000  # Chia th√†nh 5 batch (2000x5 = 10000)
all_distances = []
all_indices = []

# --- T√¨m ki·∫øm tr√™n GPU ---
print("B·∫Øt ƒë·∫ßu t√¨m ki·∫øm tr√™n GPU...")
start_time = time.time()

for i in range(0, total_queries, batch_size):
    batch_queries = query_vectors[i:i + batch_size]
    distances, indices = index.search(batch_queries, k)
    all_distances.append(distances)
    all_indices.append(indices)

# G·ªôp k·∫øt qu·∫£
distances = np.vstack(all_distances)
indices = np.vstack(all_indices)

end_time = time.time()

# --- L·ªçc v√† s·∫Øp x·∫øp k·∫øt qu·∫£ ---
print("ƒêang l·ªçc v√† s·∫Øp x·∫øp k·∫øt qu·∫£...")
all_distances = distances.flatten()
all_indices = indices.flatten()

valid_mask = all_distances >= lookalike_threshold
valid_distances = all_distances[valid_mask]
valid_indices = all_indices[valid_mask]

sorted_indices = np.argsort(-valid_distances)[:100000]
top_100k_indices = valid_indices[sorted_indices]
top_100k_distances = valid_distances[sorted_indices]

# Ghi k·∫øt qu·∫£
print(f"Th·ªùi gian t√¨m ki·∫øm tr√™n GPU: {end_time - start_time:.4f} gi√¢y")
print(f"S·ªë l∆∞·ª£ng vector c√≥ look alike >= {lookalike_threshold}: {len(valid_indices)}")

with open('top_100k_vectors_0.835_nprobe500_GPU.txt', 'w') as f:
    f.write("Query Vector, Matched Vector, Similarity\n")
    for i in range(total_queries):
        matched_vectors = [(i, indices[i, j], distances[i, j]) for j in range(k) if distances[i, j] >= lookalike_threshold]
        for q_idx, idx, dist in matched_vectors:
            f.write(f"{q_idx}, {idx}, {dist:.4f}\n")

print(f"\nƒê√£ ghi k·∫øt qu·∫£ v√†o 'top_100k_vectors_0.835_nprobe1000_GPU.txt'")
print(f"T·ªïng s·ªë vector t√¨m th·∫•y: {len(valid_distances)}")


# m·ª•c ti√™u l√† d√πng GPU ƒë·ªÉ tƒÉng t·ªëc v√† gi·ªØ nguy√™n nprobe = 1000 v√† total_queries = 10,000. -> gi·∫£i quy·∫øt l·ªói out of memory m√† v·∫´n t·∫≠n d·ª•ng t·ªëi ƒëa GPU. üöÄ

# t·ªëi ∆∞u theo h∆∞·ªõng:

# Gi·∫£m b·ªô nh·ªõ t·∫°m c·ªßa FAISS nh∆∞ng v·∫´n ƒë·∫£m b·∫£o GPU acceleration.
# D√πng "pinned memory" ƒë·ªÉ t·ªëi ∆∞u lu·ªìng d·ªØ li·ªáu gi·ªØa RAM v√† VRAM.
# Chia batch th√¥ng minh: v·∫´n gi·ªØ 10,000 truy v·∫•n nh∆∞ng chia nh·ªè x·ª≠ l√Ω t·ª´ng ph·∫ßn trong GPU.

# res.setTempMemory():

# Gi·ªõi h·∫°n b·ªô nh·ªõ GPU cho FAISS.
# Ban ƒë·∫ßu set 512MB, 
# res.setPinnedMemory():

# Cho ph√©p d√πng "pinned memory" ƒë·ªÉ t·ªëi ∆∞u d·ªØ li·ªáu gi·ªØa RAM v√† VRAM, gi·∫£m g√°nh n·∫∑ng b·ªô nh·ªõ GPU.
# Batch size:

# Thay v√¨ x·ª≠ l√Ω to√†n b·ªô 10,000 truy v·∫•n m·ªôt l·∫ßn, chia th√†nh 5 batch (2000 m·ªói batch).
# Duy tr√¨ t·ªëc ƒë·ªô t√¨m ki·∫øm nhanh nh∆∞ng h·∫°n ch·∫ø "out of memory".


# code c≈© ch∆∞a t·ªëi ∆∞u n√™n l·ªói OOM
# import numpy as np
# import faiss
# import time

# # # --- Chuy·ªÉn FAISS sang ch·∫ø ƒë·ªô GPU --- 
# # print("ƒêang kh·ªüi t·∫°o GPU resources...")
# # res = faiss.StandardGpuResources()

# # --- Chuy·ªÉn FAISS sang ch·∫ø ƒë·ªô GPU v·ªõi gi·ªõi h·∫°n b·ªô nh·ªõ ---
# print("ƒêang kh·ªüi t·∫°o GPU resources v√† gi·ªõi h·∫°n b·ªô nh·ªõ...")
# res = faiss.StandardGpuResources()
# res.setTempMemory(2 * 1024 * 1024 * 1024)  # Gi·ªõi h·∫°n b·ªô nh·ªõ GPU c√≤n 2GB


# # --- Load index v√† chuy·ªÉn sang GPU ---
# print("ƒêang load index v√† chuy·ªÉn sang GPU...")
# index = faiss.read_index('ivfflat_index_cosine_similarity.index')
# index = faiss.index_cpu_to_gpu(res, 0, index)

# # --- Load vectors ---
# print("ƒêang load vectors...")
# vectors = np.load('../random_vectors_1M.npy')

# # --- Chu·∫©n h√≥a vectors ---
# def normalize(vectors):
#     norms = np.linalg.norm(vectors, axis=1, keepdims=True)
#     np.clip(norms, 1e-10, None, out=norms)  # Tr√°nh chia cho 0
#     return vectors / norms

# normalized_vectors = normalize(vectors)

# # --- C·∫•u h√¨nh t√¨m ki·∫øm ---
# total_queries = 10000  # TƒÉng s·ªë l∆∞·ª£ng vector truy v·∫•n l√™n 10,000
# k = 100
# lookalike_threshold = 0.84
# query_vectors = normalized_vectors[:total_queries]

# # S·ªë c·ª•m ki·ªÉm tra khi t√¨m ki·∫øm
# nprobe = 1000
# index.nprobe = nprobe

# # --- T√¨m ki·∫øm tr√™n GPU ---
# print("B·∫Øt ƒë·∫ßu t√¨m ki·∫øm tr√™n GPU...")
# start_time = time.time()
# distances, indices = index.search(query_vectors, k)
# end_time = time.time()

# # --- L·ªçc v√† s·∫Øp x·∫øp k·∫øt qu·∫£ ---
# print("ƒêang l·ªçc v√† s·∫Øp x·∫øp k·∫øt qu·∫£...")
# all_distances = distances.flatten()
# all_indices = indices.flatten()

# # L·ªçc theo ng∆∞·ª°ng look alike
# valid_mask = all_distances >= lookalike_threshold
# valid_distances = all_distances[valid_mask]
# valid_indices = all_indices[valid_mask]

# # S·∫Øp x·∫øp theo ƒë·ªô t∆∞∆°ng ƒë·ªìng (cosine similarity gi·∫£m d·∫ßn)
# sorted_indices = np.argsort(-valid_distances)[:100000]
# top_100k_indices = valid_indices[sorted_indices]
# top_100k_distances = valid_distances[sorted_indices]

# all_matched_vectors = []

# # Hi·ªÉn th·ªã th·ªùi gian v√† k·∫øt qu·∫£
# print(f"Th·ªùi gian t√¨m ki·∫øm tr√™n GPU: {end_time - start_time:.4f} gi√¢y")
# print(f"S·ªë l∆∞·ª£ng vector c√≥ look alike >= {lookalike_threshold}: {len(valid_indices)}")

# # Ghi k·∫øt qu·∫£ ra file
# with open('top_100k_vectors_0.84_nprobe1000_GPU.txt', 'w') as f:
#     f.write("Query Vector, Matched Vector, Similarity\n")
#     for i in range(total_queries):
#         matched_vectors = [(i, indices[i, j], distances[i, j]) for j in range(k) if distances[i, j] >= lookalike_threshold]
#         all_matched_vectors.extend(matched_vectors)
#         for q_idx, idx, dist in matched_vectors:
#             f.write(f"{q_idx}, {idx}, {dist:.4f}\n")

# print(f"\nƒê√£ ghi k·∫øt qu·∫£ v√†o 'top_100k_vectors_0.84_nprobe1000_GPU.txt'")

# print(f"T·ªïng s·ªë vector t√¨m th·∫•y: {len(all_matched_vectors)}")
